{"version":3,"sources":["store/utils.tsx","store/connectionReducer/actions.tsx","store/connectionReducer/index.tsx","store/rootReducer.tsx","store/index.tsx","addPeople/index.tsx","checkConnection/index.tsx","logo.svg","header/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Queue","items","this","element","push","isEmpty","shift","length","str","i","Graph","noOfVertices","AdjList","Map","vertex","set","dest","get","get_keys","keys","get_values","conc","console","log","startingNode","destination","shortestDistance","pred","dist","visited","q","path","Number","MAX_VALUE","enqueue","getQueueElement","dequeue","get_List","neigh","output","crawl","DFSUtil","vert","get_neighbours","get_elem","SET_PERSON_NAME","SET_FRIEND","SET_FRIEND_LIST","SET_ALL_PEOPLE","SET_SHORTEST_DISTANCE","SET_PATH","setFriendList","person","friend","relationship","type","payload","setAllPeople","name","INITIAL_STATE","personName","allPeople","distance","friendList","reducer","state","action","rootReducer","combineReducers","connection","connectionReducer","middleware","applyMiddleware","thunkMiddleware","store","createStore","composeWithDevTools","Title","Typography","AddPeople","Form","useForm","form","useState","showModal","setModal","dispatch","useDispatch","useSelector","className","level","onClick","title","visible","footer","width","maskClosable","onCancel","centered","wrapClassName","onFinish","values","a","addUser","resetFields","initialValues","Item","labelCol","span","wrapperCol","label","htmlType","map","list","Text","Option","Select","connectionState","allUsers","uniq","isClicked","setClicked","index","indexOf","splice","g","addVertex","addEdge","undefined","bfs","direction","placeholder","onChange","setPerson","user","value","setFriend","Fragment","Header","src","logo","preview","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc4e823a.chunk.js","sourcesContent":["class Queue {\r\n    items: any;\r\n\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    enqueue(element: any) {\r\n        this.items.push(element);\r\n    }\r\n\r\n    dequeue() {\r\n        if (this.isEmpty())\r\n            return \"Underflow\";\r\n        return this.items.shift();\r\n    }\r\n\r\n    front() {\r\n        if (this.isEmpty())\r\n            return \"No elements in Queue\";\r\n        return this.items[0];\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.items.length === 0;\r\n    }\r\n\r\n    printQueue() {\r\n        var str = \"\";\r\n        for (var i = 0; i < this.items.length; i++)\r\n            str += this.items[i] + \" \";\r\n        return str;\r\n    }\r\n};\r\n\r\nexport class Graph {\r\n    noOfVertices: any;\r\n    AdjList: any;\r\n\r\n    constructor(noOfVertices: any) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.AdjList = new Map();\r\n    }\r\n\r\n    addVertex(vertex: any) {\r\n        this.AdjList.set(vertex, []);\r\n    };\r\n\r\n    addEdge(vertex: any, dest: any) {\r\n        this.AdjList.get(vertex).push(dest);\r\n        this.AdjList.get(dest).push(vertex);\r\n    };\r\n\r\n    printGraph() {\r\n        var get_keys: any = this.AdjList.keys();\r\n\r\n        for (var i of get_keys) {\r\n            var get_values = this.AdjList.get(i);\r\n            var conc = \"\";\r\n\r\n            for (var j of get_values)\r\n                conc += j + \" \";\r\n\r\n            console.log(i + \" -> \" + conc);\r\n        };\r\n    };\r\n\r\n    bfs(startingNode: any, destination: any) {\r\n        var pred: any = [];\r\n        var dist: any = [];\r\n        var visited: any = {};\r\n        var q = new Queue();\r\n        var shortestDistance: any;\r\n        var path: string = '';\r\n\r\n        for (let i = 0; i < this.noOfVertices; i++) {\r\n            visited[i] = false;\r\n            dist[i] = Number.MAX_VALUE;\r\n            pred[i] = -1;\r\n        }\r\n\r\n        visited[startingNode] = true;\r\n        q.enqueue(startingNode);\r\n        dist[startingNode] = 0;\r\n\r\n        while (!q.isEmpty()) {\r\n            var getQueueElement = q.dequeue();\r\n            var get_List = this.AdjList.get(getQueueElement);\r\n\r\n            for (var i in get_List) {\r\n                var neigh = get_List[i];\r\n\r\n                if (!visited[neigh]) {\r\n                    visited[neigh] = true;\r\n                    dist[neigh] = dist[getQueueElement] + 1;\r\n                    pred[neigh] = getQueueElement;\r\n                    pred[startingNode] = -1;\r\n                    q.enqueue(neigh);\r\n                    if (neigh === destination) {\r\n                        let output: any = [];\r\n                        let crawl = destination;\r\n                        output.push(crawl);\r\n                        while (pred[crawl] != -1) {\r\n                            output.push(pred[crawl]);\r\n                            crawl = pred[crawl];\r\n                        }\r\n                        shortestDistance = dist[destination];\r\n                        for (let i = output.length - 1; i >= 0; i--) {\r\n                            console.log(output[i]);\r\n                            if (path === '') {\r\n                                path = output[i]\r\n                            } else {\r\n                                path = path + ' -> ' + output[i];\r\n                            }\r\n                        }\r\n                        return { shortestDistance: shortestDistance, path: path };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    dfs(startingNode: any) {\r\n        var visited = {};\r\n        this.DFSUtil(startingNode, visited);\r\n    }\r\n\r\n    DFSUtil(vert: any, visited: any) {\r\n        visited[vert] = true;\r\n        console.log(\"vert\", vert);\r\n\r\n        var get_neighbours = this.AdjList.get(vert);\r\n\r\n        for (var i in get_neighbours) {\r\n            var get_elem = get_neighbours[i];\r\n            if (!visited[get_elem]) {\r\n                this.DFSUtil(get_elem, visited);\r\n                console.log(\"get_elem\", get_elem);\r\n            }\r\n        }\r\n    };\r\n};","import { isEmpty, uniq } from 'lodash';\r\nimport { Graph } from '../utils';\r\n\r\nexport const SET_PERSON_NAME = 'SET_PERSON_NAME';\r\nexport const SET_FRIEND = 'SET_FRIEND';\r\nexport const SET_FRIEND_LIST = 'SET_FRIEND_LIST';\r\nexport const SET_ALL_PEOPLE = 'SET_ALL_PEOPLE';\r\nexport const SET_SHORTEST_DISTANCE = 'SET_SHORTEST_DISTANCE';\r\nexport const SET_PATH = 'SET_PATH';\r\n\r\nexport const setShortestDistance = (distance: any) => {\r\n    return {\r\n        type: SET_SHORTEST_DISTANCE,\r\n        payload: distance\r\n    };\r\n};\r\n\r\nexport const setPath = (path: any) => {\r\n    return {\r\n        type: SET_PATH,\r\n        payload: path\r\n    };\r\n};\r\n\r\nexport const setPerson = (name: string) => {\r\n    return {\r\n        type: SET_PERSON_NAME,\r\n        payload: name\r\n    };\r\n};\r\n\r\nexport const setFriend = (name: string) => {\r\n    return {\r\n        type: SET_FRIEND,\r\n        payload: name\r\n    };\r\n};\r\n\r\nexport const setFriendList = (person: string, friend: string, relationship: string) => {\r\n    return {\r\n        type: SET_FRIEND_LIST,\r\n        payload: {\r\n            person: person,\r\n            friend: friend,\r\n            relationship: isEmpty(relationship) ? 'Friend' : relationship\r\n        }\r\n    };\r\n};\r\n\r\nexport const setAllPeople = (name: string) => {\r\n    return {\r\n        type: SET_ALL_PEOPLE,\r\n        payload: name\r\n    };\r\n};\r\n\r\nexport const addUser = (person: string, friend: string, relationship: string) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(setFriendList(person, friend, relationship));\r\n        dispatch(setAllPeople(person));\r\n        dispatch(setAllPeople(friend));\r\n    };\r\n};\r\n\r\nexport const computeRelationship = (state: any) => {\r\n    return async (dispatch: any) => {\r\n        const { allPeople, friendList, personName, friend } = state;\r\n        const allUsers: Array<any> = uniq(allPeople);\r\n        const index = allUsers.indexOf('');\r\n        if (index > -1) {\r\n            allUsers.splice(index, 1);\r\n        }\r\n        let g = new Graph(allUsers.length);\r\n        for (let i = 0; i < allUsers.length; i++) {\r\n            g.addVertex(allUsers[i]);\r\n        }\r\n        for (let i = 1; i < friendList.length; i++) {\r\n            g.addEdge(friendList[i].person, friendList[i].friend);\r\n        }\r\n        const output = g.bfs(personName, friend);\r\n        if (output !== undefined) {\r\n            dispatch(setShortestDistance(output?.shortestDistance));\r\n            dispatch(setPath(output?.path));\r\n        }\r\n    };\r\n};\r\n","import {\r\n    SET_ALL_PEOPLE,\r\n    SET_FRIEND,\r\n    SET_FRIEND_LIST,\r\n    SET_PATH,\r\n    SET_PERSON_NAME,\r\n    SET_SHORTEST_DISTANCE\r\n} from './actions';\r\n\r\nconst INITIAL_STATE = {\r\n    personName: '',\r\n    friend: '',\r\n    allPeople: [''],\r\n    distance: 0,\r\n    path: '',\r\n    friendList: [{ person: '', friend: '', relationship: '' }]\r\n};\r\n\r\nconst reducer = (state = INITIAL_STATE, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case SET_PERSON_NAME:\r\n            return { ...state, personName: action.payload };\r\n\r\n        case SET_FRIEND:\r\n            return { ...state, friend: action.payload };\r\n\r\n        case SET_FRIEND_LIST:\r\n            return { ...state, friendList: [...state.friendList, action.payload] };\r\n\r\n        case SET_ALL_PEOPLE:\r\n            return { ...state, allPeople: [...state.allPeople, action.payload] };\r\n\r\n        case SET_SHORTEST_DISTANCE:\r\n            return { ...state, distance: action.payload };\r\n\r\n        case SET_PATH:\r\n            return { ...state, path: action.payload };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\nimport connectionReducer from './connectionReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    connection: connectionReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middleware = applyMiddleware(thunkMiddleware);\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(middleware));\r\n\r\nexport default store;\r\n","import React, { useState } from 'react';\r\nimport { Button, Form, Input, Modal, Typography } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './addPeople.scss';\r\n\r\nimport { addUser } from '../store/connectionReducer/actions';\r\nimport { RootState } from '../store/rootReducer';\r\nimport { isEmpty } from 'lodash';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst AddPeople = () => {\r\n    const [form] = Form.useForm();\r\n    const [showModal, setModal] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const connectionState = useSelector((state: RootState) => state.connection);\r\n    const { friendList } = connectionState;\r\n\r\n    const onFinish = (values: any) => {\r\n        const { name, friend, relationship } = values;\r\n        if (!isEmpty(name) && !isEmpty(friend)) {\r\n            dispatch(addUser(name, friend, relationship));\r\n        }\r\n        setModal(false);\r\n        form.resetFields();\r\n    };\r\n\r\n    return (\r\n        <div className='add-people'>\r\n            <Title className='add-person-title' level={3}>\r\n                It is said that all people on average are six or fewer social connections away from each other.\r\n                Want to know how you are connected to a friend?\r\n                <Button\r\n                    type='ghost'\r\n                    className='count-me-in-button'\r\n                    onClick={() => setModal(true)}\r\n                >\r\n                    Count Me In!\r\n                </Button>\r\n            </Title>\r\n            <Modal\r\n                title={null}\r\n                visible={showModal}\r\n                footer={null}\r\n                width={'25%'}\r\n                maskClosable={false}\r\n                className='custom-add-modal'\r\n                onCancel={() => setModal(!showModal)}\r\n                centered\r\n                wrapClassName='add-person-popup-container'\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    onFinish={onFinish}\r\n                    initialValues={{\r\n                        name: '',\r\n                        friend: '',\r\n                        relationship: ''\r\n                    }}\r\n                >\r\n                    {/* 1. You should be able to add people. */}\r\n                    <Form.Item\r\n                        labelCol={{ span: 24 }}\r\n                        wrapperCol={{ span: 24 }}\r\n                        label='Enter your name'\r\n                        name='name'\r\n                    >\r\n                        <Input className='custom-input' />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        labelCol={{ span: 24 }}\r\n                        wrapperCol={{ span: 24 }}\r\n                        label={`Enter another person's name`}\r\n                        name='friend'\r\n                    >\r\n                        <Input className='custom-input' />\r\n                    </Form.Item>\r\n                    {/* 2. You should be able to add types of relationships (for simplicity, you can just add one -\r\n                        friend). */}\r\n                    <Form.Item\r\n                        labelCol={{ span: 24 }}\r\n                        wrapperCol={{ span: 24 }}\r\n                        label={`What is your relationship ?`}\r\n                        name='relationship'\r\n                    >\r\n                        <Input className='custom-input' />\r\n                    </Form.Item>\r\n                    <Button\r\n                        htmlType='submit'\r\n                        className='add-person-button'\r\n                        type='primary'\r\n                    >Add</Button>\r\n                </Form>\r\n            </Modal>\r\n            {/* 3. You should be able to set the relationships between two people. (Eg. Rahul is a friend of\r\n                Sunny) */}\r\n            {friendList.length !== 1 &&\r\n                <Title level={3} className='list-of-people-title'>\r\n                    List of people added:\r\n                </Title>\r\n            }\r\n            {friendList.map((list) => {\r\n                const { person, relationship, friend } = list;\r\n                return (!isEmpty(person) && !isEmpty(friend) &&\r\n                    <ul className='list-of-people-title'>\r\n                        <li>{person} is the {relationship} of {friend}.</li>\r\n                    </ul>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddPeople;\r\n","import React, { useState } from 'react';\r\nimport { Button, Form, Select, Space, Typography } from 'antd';\r\n\r\nimport './checkConnection.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { isEmpty, uniq } from 'lodash';\r\nimport { computeRelationship, setFriend, setPerson } from '../store/connectionReducer/actions';\r\n\r\nconst { Text, Title } = Typography;\r\nconst { Option } = Select;\r\n\r\nconst AddPeople = () => {\r\n    const dispatch = useDispatch();\r\n    const connectionState = useSelector((state: any) => state.connection);\r\n    const { personName, allPeople, distance, path } = connectionState;\r\n    const allUsers: Array<any> = uniq(allPeople);\r\n    const [isClicked, setClicked] = useState(false);\r\n\r\n    const onSelectPersonOne = (name: any) => {\r\n        dispatch(setPerson(name));\r\n    };\r\n\r\n    const onSelectPersonTwo = (name: any) => {\r\n        dispatch(setFriend(name));\r\n    };\r\n\r\n    const onFinish = (values: any) => {\r\n        console.log(\"finish\");\r\n        setClicked(true);\r\n        dispatch(computeRelationship(connectionState));\r\n    };\r\n\r\n    return (allUsers.length !== 1 ?\r\n        <div className='check-connection'>\r\n            <Title level={3}>Show Connections</Title>\r\n            <Text>Check how you are related by selecting two names in the list</Text>\r\n            <Form onFinish={onFinish}>\r\n                <Space direction='horizontal'>\r\n                    <Form.Item wrapperCol={{ span: 24 }} name='personOne'>\r\n                        <Select\r\n                            placeholder='Select'\r\n                            onChange={onSelectPersonOne}\r\n                        >\r\n                            {allUsers.map((user: any) => {\r\n                                return (!isEmpty(user) &&\r\n                                    <Option key={user} value={user}>\r\n                                        {user}\r\n                                    </Option>\r\n                                )\r\n                            })}\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item wrapperCol={{ span: 24 }} name='personTwo'>\r\n                        <Select\r\n                            placeholder='Select'\r\n                            onChange={onSelectPersonTwo}\r\n                        >\r\n                            {allUsers.map((user: any) => {\r\n                                return (!isEmpty(user) && user !== personName &&\r\n                                    <Option key={user} value={user}>\r\n                                        {user}\r\n                                    </Option>\r\n                                )\r\n                            })}\r\n                        </Select>\r\n                    </Form.Item>\r\n                </Space>\r\n                <Button\r\n                    htmlType='submit'\r\n                    type='ghost'\r\n                    className='see-connection-button'\r\n                >\r\n                    See Connection\r\n                </Button>\r\n            </Form>\r\n            {isClicked &&\r\n                <>\r\n                    {distance === 0 ?\r\n                        <Title level={4}>There are no mutual connection between the two users!</Title> :\r\n                        <>\r\n                            <Title level={4}>\r\n                                The degree of seperation is {distance}\r\n                            </Title>\r\n                            <Title level={4}>\r\n                                The two users are connected as follows:\r\n                            </Title>\r\n                            <Text>{path}</Text>\r\n                        </>\r\n                    }\r\n                </>\r\n            }\r\n        </div> :\r\n        <React.Fragment>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AddPeople;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport { Image, Typography } from 'antd';\r\n\r\nimport './header.scss';\r\n\r\nimport logo from '../logo.svg';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='header-bar'>\r\n            <Image className='logo' src={logo} preview={false} width='8vw' />\r\n            <Title level={1} className='header-title'>Social Connections</Title>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport 'antd/dist/antd.css';\n\nimport AddPeople from './addPeople';\nimport CheckConnection from './checkConnection';\nimport './App.scss';\nimport Header from './header';\n\nconst App = () => {\n    return (\n        <div className='app'>\n            <Header />\n            <div className='app-content'>\n                <AddPeople />\n                <CheckConnection />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}